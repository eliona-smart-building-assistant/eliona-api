openapi: 3.0.3

#  This file is part of the eliona project.
#  Copyright Â© 2022 LEICOM iTEC AG. All Rights Reserved.
#  ______ _ _
# |  ____| (_)
# | |__  | |_  ___  _ __   __ _
# |  __| | | |/ _ \| '_ \ / _` |
# | |____| | | (_) | | | | (_| |
# |______|_|_|\___/|_| |_|\__,_|
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
#  BUT NOT LIMITED  TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
#  NON INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
#  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

info:
  version: 2.0.1
  title: Eliona API
  description: API to access Eliona Smart Building Assistant
  termsOfService: https://www.eliona.io/v2
externalDocs:
  description: Find out more about Eliona
  url: https://www.eliona.io
servers:
  - url: http://api.eliona.io/v2

tags:
  - name: App
    description: Handle apps
    externalDocs:
      url: https://www.eliona.io
  - name: Asset
    description: Handle Assets
    externalDocs:
      url: https://www.eliona.io
  - name: Asset type
    description: Handle Asset types
    externalDocs:
      url: https://www.eliona.io
  - name: Heap
    description: Handle Heap data
    externalDocs:
      url: https://www.eliona.io
  - name: Dashboard
    description: Handle frontend dashboards
    externalDocs:
      url: https://www.eliona.io

paths:

  /app/{app-name}:
    $ref: './v2/paths/apps.yaml'

  /patch/{app-name}/{patch-name}:
    $ref: './v2/paths/patch.yaml'

  /asset/{asset-id}/parents:
    $ref: './v2/paths/assetParents.yaml'

#  /app/{app-name}/register:
#    put:
#      tags:
#        - App
#      summary: Marks an app in eliona as registered
#      description: "Marks that the app is now initialized and installed. Further request to get app information returns { \"registered\": true }"
#      operationId: registerAppByName
#      parameters:
#        - $ref: '#/components/parameters/AppName'
#      responses:
#        200:
#          description: Successfully registered the app in eliona
#        400:
#          description: Unable to register app
#
#  /patch/{app-name}/{patch-name}/apply:
#    put:
#      tags:
#        - App
#      summary: Marks a patch in eliona as applied
#      description: "Marks that the patch is now applied. Further request to get patch information returns { \"applied\": true }"
#      operationId: applyPatchByName
#      parameters:
#        - $ref: '#/components/parameters/AppName'
#        - $ref: '#/components/parameters/PatchName'
#      responses:
#        200:
#          description: Successfully applied the patch for the app in eliona
#        400:
#          description: Unable to apply patch
#
#  /asset:
#    post:
#      tags:
#        - Asset
#      summary: Create or update an asset
#      description: Creates an asset if no asset with the same projectId and globalAssetIdentifier already exists. If there is such an asset, the asset is updated.
#      operationId: postAsset
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/Asset'
#      responses:
#        200:
#          description: Successfully created a new or updated an existing asset
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/Asset'
#
#  /asset/{asset-id}:
#    get:
#      tags:
#        - Asset
#      summary: Information about an Asset
#      description: Gets information about an asset.
#      operationId: getAssetById
#      parameters:
#        - $ref: '#/components/parameters/AssetId'
#      responses:
#        200:
#          description: Successfully returned the asset by id.
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/Asset'
#        404:
#          description: Asset with id not found
#
#  /asset/{asset-id}/children:
#    get:
#      tags:
#        - Asset
#      summary: Get children for an asset
#      description: Returns a list of asset ids which are children for an asset
#      operationId: getAssetChildren
#      parameters:
#        - $ref: '#/components/parameters/AssetId'
#      responses:
#        200:
#          description: Successfully returned children
#          content:
#            application/json:
#              schema:
#                type: array
#                items:
#                  $ref: '#/components/schemas/AssetRelation'
#        404:
#          description: Asset with id not found
#

#
#  /asset-type:
#    get:
#      tags:
#        - Asset type
#      summary: List of asset types
#      description: Returns a list of asset types
#      operationId: getAssetTypes
#      parameters:
#        - $ref: '#/components/parameters/PageLimit'
#        - $ref: '#/components/parameters/PageOffset'
#      responses:
#        200:
#          description: Successfully returned a list of asset types
#          content:
#            application/json:
#              schema:
#                type: array
#                items:
#                  $ref: '#/components/schemas/AssetType'
#    post:
#      tags:
#        - Asset type
#      summary: Create or update an asset type
#      description: Create a new asset type or update an asset type if already exists
#      operationId: postAssetType
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/AssetType'
#      responses:
#        200:
#          description: Successfully created a new or updated an existing asset type
#
#  /asset-type-attribute:
#    post:
#      tags:
#        - Asset type
#      summary: Create or update an asset type attribute
#      description: Create a new asset type attribute or update an asset type attribute if already exists
#      operationId: postAssetTypeAttribute
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/Attribute'
#      responses:
#        200:
#          description: Successfully created a new or updated an existing asset type attribute
#
#  /heap:
#    post:
#      tags:
#        - Heap
#      summary: Create or update heap data
#      description: Create new heap data or update data if already exists
#      operationId: postHeap
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/Heap'
#      responses:
#        200:
#          description: Successfully created a new or updated existing heap data
#
#  /dashboard:
#    post:
#      tags:
#        - Dashboard
#      summary: Creates a new dashboard
#      description: Create a new dashboard for frontend
#      operationId: postDashboard
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/Dashboard'
#      responses:
#        200:
#          description: Successfully added a new Dashboard
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/Dashboard'
#
#  /dashboard/{dashboard-id}/widget:
#    put:
#      tags:
#        - Dashboard
#      summary: Adds widget to dashboard
#      description: Create a new widget an ad this to a dashboard
#      operationId: putDashboardWidget
#      parameters:
#        - $ref: '#/components/parameters/DashboardId'
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/Widget'
#      responses:
#        200:
#          description: Successfully added widget
#
#  /widget-type:
#    post:
#      tags:
#        - Dashboard
#      summary: Adds a new widget type
#      description: Create a new widget type
#      operationId: postWidgetType
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/WidgetType'
#      responses:
#        200:
#          description: Successfully added widget type

components:
  parameters:

    DashboardId:
      name: dashboard-id
      in: path
      description: The id of the dashboard
      example: 4711
      required: true
      schema:
        type: integer

    AssetId:
      name: asset-id
      in: path
      description: The id of the asset
      example: 4711
      required: true
      schema:
        type: integer

    AppName:
      name: app-name
      in: path
      description: The name of the app
      example: weather
      required: true
      schema:
        type: string

    PatchName:
      name: patch-name
      in: path
      description: The name of the patch
      example: 2.0.0
      required: true
      schema:
        type: string

    PageLimit:
      name: limit
      in: query
      example: 20
      description: Limits the number of items on a page
      schema:
        type: integer

    PageOffset:
      name: offset
      in: query
      example: 1
      description: Specifies the page number to be displayed
      schema:
        type: integer

  schemas:
    $ref: './v2/schemas.yaml'